// Code generated by goctl. DO NOT EDIT.
// Source: base.proto

package baseservice

import (
	"context"

	"base/rpc/base"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateReq      = base.CreateReq
	CreateResp     = base.CreateResp
	GetBalanceReq  = base.GetBalanceReq
	GetBalanceResp = base.GetBalanceResp

	BaseService interface {
		GetBalance(ctx context.Context, in *GetBalanceReq, opts ...grpc.CallOption) (*GetBalanceResp, error)
		Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error)
	}

	defaultBaseService struct {
		cli zrpc.Client
	}
)

func NewBaseService(cli zrpc.Client) BaseService {
	return &defaultBaseService{
		cli: cli,
	}
}

func (m *defaultBaseService) GetBalance(ctx context.Context, in *GetBalanceReq, opts ...grpc.CallOption) (*GetBalanceResp, error) {
	client := base.NewBaseServiceClient(m.cli.Conn())
	return client.GetBalance(ctx, in, opts...)
}

func (m *defaultBaseService) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error) {
	client := base.NewBaseServiceClient(m.cli.Conn())
	return client.Create(ctx, in, opts...)
}
